mdl 1.6;

import ::math::*;
import ::state::*;
import ::tex::*;
import ::anno::*;
using .::OmniUe4Function import *;
using .::OmniUe4Base import *;

export annotation sampler_color();
export annotation sampler_normal();
export annotation sampler_grayscale();
export annotation sampler_alpha();
export annotation sampler_masks();
export annotation sampler_distancefield();
export annotation dither_masked_off();
export annotation world_space_normal();

export material MI_LampPost01(
	float BaseUTiling = 1.0
	[[
		anno::display_name("Base U Tiling"),
		anno::ui_order(32),
		anno::in_group("Base")
	]],
	float BaseVTiling = 1.0
	[[
		anno::display_name("Base V Tiling"),
		anno::ui_order(32),
		anno::in_group("Base")
	]],
	uniform texture_2d Normal = texture_2d("./Textures/T_B_N.png",::tex::gamma_linear)
	[[
		anno::display_name("Normal"),
		anno::ui_order(32),
		anno::in_group("Base_Textures"),
		sampler_normal()
	]],
	uniform texture_2d emmisive = texture_2d("./Textures/T_BB_D.png",::tex::gamma_srgb)
	[[
		anno::display_name("emmisive"),
		anno::ui_order(32),
		anno::in_group("Emmisive"),
		sampler_color()
	]],
	float4 Emmisivecolor = float4(1.0,1.0,1.0,0.0)
	[[
		anno::display_name("Emmisive color"),
		anno::ui_order(32),
		anno::in_group("Emmisive")
	]],
	float EmmisiveStr = 1.0
	[[
		anno::display_name("Emmisive Str"),
		anno::ui_order(32),
		anno::in_group("Emmisive")
	]],
	float Contrast = 0.0
	[[
		anno::display_name("Contrast"),
		anno::ui_order(32),
		anno::in_group("Base")
	]],
	float Hue = 0.0
	[[
		anno::display_name("Hue"),
		anno::ui_order(32),
		anno::in_group("Base")
	]],
	uniform texture_2d Diffuse = texture_2d("./Textures/T_BG_D.png",::tex::gamma_srgb)
	[[
		anno::display_name("Diffuse"),
		anno::ui_order(32),
		anno::in_group("Base_Textures"),
		sampler_color()
	]],
	float desaturation = 0.0
	[[
		anno::display_name("desaturation"),
		anno::ui_order(32),
		anno::in_group("Base")
	]],
	float4 diffusecolor = float4(1.0,1.0,1.0,0.0)
	[[
		anno::display_name("diffuse color"),
		anno::ui_order(32),
		anno::in_group("Base")
	]],
	uniform texture_2d SRMH = texture_2d("./Textures/T_BB_D.png",::tex::gamma_srgb)
	[[
		anno::display_name("SRMH"),
		anno::ui_order(32),
		anno::in_group("Base_Textures"),
		sampler_color()
	]],
	float Metallic = 0.0
	[[
		anno::display_name("Metallic"),
		anno::ui_order(32),
		anno::in_group("Base")
	]],
	float spec = 0.0
	[[
		anno::display_name("spec"),
		anno::ui_order(32),
		anno::in_group("Base")
	]],
	float Roughness = 0.0
	[[
		anno::display_name("Roughness"),
		anno::ui_order(32),
		anno::in_group("Base")
	]],
	int MaxTexCoordIndex = 3
	[[
		anno::hidden()
	]])
 = 
	let {
	float3 WorldPositionOffset_mdl = float3(0.0,0.0,0.0);
	float2 CustomizedUV0_mdl = float2(state::texture_coordinate(math::min(0,MaxTexCoordIndex)).x,1.0-state::texture_coordinate(math::min(0,MaxTexCoordIndex)).y);

	float2 Local0 = (CustomizedUV0_mdl * float2(1.0,0.0));
	float2 Local1 = (Local0 * BaseUTiling);
	float2 Local2 = (CustomizedUV0_mdl * float2(0.0,1.0));
	float2 Local3 = (Local2 * BaseVTiling);
	float2 Local4 = (Local1 + Local3);
	float4 Local5 = ::unpack_normal_map(tex::lookup_float4(Normal,float2(Local4.x,1.0-Local4.y),tex::wrap_repeat,tex::wrap_repeat));
	float3 Local6 = (float3(Local5.x,Local5.y,Local5.z) * float3(1.0,-1.0,1.0));

	float3 Normal_mdl = Local6;

	float4 Local7 = tex::lookup_float4(emmisive,float2(CustomizedUV0_mdl.x,1.0-CustomizedUV0_mdl.y),tex::wrap_repeat,tex::wrap_repeat);
	float3 Local8 = (float3(Local7.x,Local7.y,Local7.z) * float3(Emmisivecolor.x,Emmisivecolor.y,Emmisivecolor.z));
	float3 Local9 = (Local8 * EmmisiveStr);
	float Local10 = (0.0 - Contrast);
	float Local11 = (Contrast + 1.0);
	float Local12 = (Hue * 6.283185);
	float3 Local13 = math::normalize(float3(1.0,1.0,1.0));
	float4 Local14 = tex::lookup_float4(Diffuse,float2(Local4.x,1.0-Local4.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local15 = math::dot(float3(Local14.x,Local14.y,Local14.z), float3(0.3,0.59,0.11));
	float3 Local16 = math::lerp(float3(Local14.x,Local14.y,Local14.z),float3(Local15,Local15,Local15),desaturation);
	float3 Local17 = ::rotate_about_axis(float4(Local13.x,Local13.y,Local13.z,Local12),float3(0.0,0.0,0.0),Local16);
	float3 Local18 = (Local17 + Local16);
	float3 Local19 = math::lerp(float3(float2(Local10,Local10).x,float2(Local10,Local10).y,Local10),float3(Local11,Local11,Local11),Local18);
	float3 Local20 = math::min(math::max(Local19,float3(0.0,0.0,0.0)),float3(1.0,1.0,1.0));
	float3 Local21 = (Local20 * float3(diffusecolor.x,diffusecolor.y,diffusecolor.z));
	float4 Local22 = tex::lookup_float4(SRMH,float2(Local4.x,1.0-Local4.y),tex::wrap_repeat,tex::wrap_repeat);
	float Local23 = (Local22.z + Metallic);
	float Local24 = (Local22.x + spec);
	float Local25 = (Local22.y + Roughness);

	float3 EmissiveColor_mdl = Local9;
	float OpacityMask_mdl = 1.0;
	float3 BaseColor_mdl = Local21;
	float Metallic_mdl = Local23;
	float Specular_mdl = Local24;
	float Roughness_mdl = Local25;

	} in
		::OmniUe4Base(
			base_color: BaseColor_mdl,
			metallic: Metallic_mdl,
			roughness: Roughness_mdl,
			specular: Specular_mdl,
			normal: Normal_mdl,
			opacity: OpacityMask_mdl,
			emissive_color: EmissiveColor_mdl,
			displacement: WorldPositionOffset_mdl,
			two_sided: false);
